Liste des instructions :
	sa|sb (swap a|b) : intervertit les 2 premiers elements au sommet de la pile.
Ne fait rien s'il n'y en a qu'un ou aucun.
	ss : sa t sb en meme temps.
	pa|pb (push a|b) : prend le premier element au sommet d'une pile et le met
sur l'autre. Ne fait rien si la liste est vide.
exemple : push a => premier element va sur pile b. Si a vide, fait rien.
	ra|rb (rotate a|b) : decale d'une position vers le haut tous les elements de
la pile. Le premier element devient le dernier.
	rr : ra et rb en meme temps.
	rra|rrb (reverse rotate a|b) : decale d'une position vers le bas tous les
elements de la pile. Le dernier element devient le premier.
	rrr : rra et rrb en meme temps.

ORDRE => PREMIER ARGUMENT AU SOMMET DE LA LISTE, DONC A GAUCHE.
Si doublons ou arguments non int, return "Error".
Validation minimaliste : 100 nombres aleatoires en moins de 700 operations.
Validation optimale : 	 500 nombres aleatoires en moins de 5500 operations.

idees :
	- savoir en avance combien de chunks on aura
	- adapter le nombre de chunks en fonctions de la taille de a
	- quand dernier chunk dans a, utiliser des rr/rrr pour optimiser des coups
	- en dessous de :
		- 50 -> 4 chunks?
		- 100 -> 5 chunks?
		- 300 -> 8 chunks?
		- 500 -> 10 chunks?

Init a and b
a : 2 1 3 6 5 8
b : 

Exec sa
a : 1 2 3 6 5 8
b : 

Exec pb pb pb
a : 6 5 8
b : 3 2 1

Exec sa
a : 5 6 8
b : 3 2 1

Exec pa pa pa
a : 1 2 3 5 6 8
b : 

1 2 3	1 3 2	2 3 1	2 1 3	3 1 2	3 2 1
done	sa/ra	rra  	sa		ra		ra/sa

if (c < b && c > a)
	sa;
	ra;

if (a < b && a > c)
	rra;

if (a > b && a < c)
	sa;

if (c < a && c > b)
	ra;

if (b < a && b > c)
	ra/sa
	tab = [1, 3, 4, 5, 6, 7, 8, 10, 12, 14]

5 4
14 5 4
6 14 5 4
14 6 5 4
10 14 6 5 4
14 10 6 5 4
7 1 3 4 5 6 10 14

1. faire fonction pour compter nombres d'instructions en avance pour chaque element du tab
2. si un element a moins dinstructions que les autres, le mettre en tete de pile et push
	sinon prendre au pif pour l'instant, mais on pourrait regarder avec plus d'elements pour optimiser
3. trier b au fur et a mesure en decroissant
4. recommencer jusqu'a lst(*a) <= 2?

reflexion : au lieu de tab, faire une struct de ce type :
typedef struct s_list_swap
{
	int					index;
	int					value;
	struct s_list_swap	*next;
}						t_list_lower;

index : index de l'element dans a
value : valeur de l'element
Ainsi on economise des fonctions, et au lieu de gerer deux array en meme temps,
une liste suffit

23 5 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28 14 33 4
rra
4 23 5 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28 14 33
pb
23 5 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28 14 33
sa
5 23 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28 14 33
pb
23 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28 14 33
rra/rra
14 33 23 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28
pb
33 23 17 42 8 31 12 7 39 1 19 26 3 15 10 6 28
rra/rra
6 28 33 23 17 42 8 31 12 7 39 1 19 26 3 15 10
pb
28 33 23 17 42 8 31 12 7 39 1 19 26 3 15 10
rra/pb
28 33 23 17 42 8 31 12 7 39 1 19 26 3 15
rra/rra/pb
15 28 33 23 17 42 8 31 12 7 39 1 19 26
rra/rra/rra/pb
19 26 15 28 33 23 17 42 8 31 12 7 39
rra/rra/pb
39 19 26 15 28 33 23 17 42 8 31 12
rra/pb
39 19 26 15 28 33 23 17 42 8 31
rra/rra/pb
31 39 19 26 15 28 33 23 17 42

